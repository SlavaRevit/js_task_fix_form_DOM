{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAU,EAAG,SAAS,gBAAgB,CAAC,UAO7C,SAAS,EAAiB,CAAI,EAI5B,IAAK,IAHC,EAAQ,EAAE,CACZ,EAAY,EAEP,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC3B,CAAI,CAAC,EAAE,GAAK,CAAI,CAAC,EAAE,CAAC,WAAW,KAC7B,IAAc,GAChB,EAAM,IAAI,CAAC,EAAK,KAAK,CAAC,EAAW,IAEnC,EAAY,GAKhB,OAFA,EAAM,IAAI,CAAC,EAAK,KAAK,CAAC,IAEf,EAAM,GAAG,CAAC,SAAC,CAAlB,EAA2B,OAjBpB,AAiB0C,EAjBrC,KAAK,CAAC,EAAG,GAAG,WAAW,GAAK,AAiBS,EAjBJ,KAAK,CAAC,EAAG,AAiBL,EAjBU,MAAM,C,EAkBnE,CAEA,AAvBgB,EAAG,SAAS,gBAAgB,CAAC,WAuBtC,OAAO,CAAC,SAAC,CAAA,CAAO,CAAvB,EACE,IAAM,EAAQ,SAAS,aAAa,CAAC,SAErC,EAAM,YAAY,CAAC,MAAO,CAAM,CAAC,EAAM,CAAC,EAAE,EAC1C,EAAM,SAAS,CAAG,cAClB,EAAM,WAAW,CAAG,EAAiB,CAAM,CAAC,EAAM,CAAC,IAAI,EAAE,IAAI,CAAC,KAE9D,EAAM,OAAO,CAAC,EAChB,GAEA,EAAO,OAAO,CAAC,SAAC,CAAhB,EAEE,IAAM,EAAM,EADM,EAAM,IAAI,EACY,IAAI,CAAC,IAE7C,CAAA,EAAM,WAAW,CAAG,CACtB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar inputs = _to_consumable_array(document.querySelectorAll(\"input\"));\nvar fields = _to_consumable_array(document.querySelectorAll(\".field\"));\nfunction cappitalizeFirtLetter(word) {\n    return word.slice(0, 1).toUpperCase() + word.slice(1, word.length);\n}\nfunction splitByUppercase(word) {\n    var parts = [];\n    var lastindex = 0;\n    for(var i = 0; i < word.length; i++)if (word[i] === word[i].toUpperCase()) {\n        if (lastindex !== i) parts.push(word.slice(lastindex, i));\n        lastindex = i;\n    }\n    parts.push(word.slice(lastindex));\n    return parts.map(function(part) {\n        return cappitalizeFirtLetter(part);\n    });\n}\nfields.forEach(function(field, index) {\n    var label = document.createElement(\"label\");\n    label.setAttribute(\"for\", inputs[index].id);\n    label.className = \"field-label\";\n    label.textContent = splitByUppercase(inputs[index].name).join(\" \");\n    field.prepend(label);\n});\ninputs.forEach(function(input) {\n    var inputName = input.name;\n    var res = splitByUppercase(inputName).join(\" \");\n    input.placeholder = res;\n});\n\n//# sourceMappingURL=index.1c006d78.js.map\n","'use strict';\n\nconst inputs = [...document.querySelectorAll('input')];\nconst fields = [...document.querySelectorAll('.field')];\n\nfunction cappitalizeFirtLetter(word) {\n  return word.slice(0, 1).toUpperCase() + word.slice(1, word.length);\n}\n\nfunction splitByUppercase(word) {\n  const parts = [];\n  let lastindex = 0;\n\n  for (let i = 0; i < word.length; i++) {\n    if (word[i] === word[i].toUpperCase()) {\n      if (lastindex !== i) {\n        parts.push(word.slice(lastindex, i));\n      }\n      lastindex = i;\n    }\n  }\n  parts.push(word.slice(lastindex));\n\n  return parts.map((part) => cappitalizeFirtLetter(part));\n}\n\nfields.forEach((field, index) => {\n  const label = document.createElement('label');\n\n  label.setAttribute('for', inputs[index].id);\n  label.className = 'field-label';\n  label.textContent = splitByUppercase(inputs[index].name).join(' ');\n\n  field.prepend(label);\n});\n\ninputs.forEach((input) => {\n  const inputName = input.name;\n  const res = splitByUppercase(inputName).join(' ');\n\n  input.placeholder = res;\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","inputs","document","querySelectorAll","splitByUppercase","word","parts","lastindex","toUpperCase","push","map","part","fields","forEach","field","index","label","createElement","setAttribute","id","className","textContent","join","prepend","input","res","placeholder"],"version":3,"file":"index.1c006d78.js.map"}